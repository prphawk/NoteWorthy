/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package noteworthy;

import java.awt.HeadlessException;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.io.File;
import java.io.FileNotFoundException;
import org.jfugue.player.*;
import org.jfugue.pattern.*;


/**
 *
 * @author mayra
 */
public class NoteWorthy extends javax.swing.JFrame {

    /**
     * Creates new form NoteWorthy
     */
    private Pattern pattern;
    
    public NoteWorthy() {
        initComponents();
        pattern = null;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mapFrame = new javax.swing.JFrame();
        scrollPaneMap = new javax.swing.JScrollPane();
        mapTable = new javax.swing.JTable();
        panel = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        buildButton = new javax.swing.JButton();
        downloadButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        importItem = new javax.swing.JMenuItem();
        exportItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpItem = new javax.swing.JMenuItem();

        mapFrame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        mapFrame.setTitle("Mapping");
        mapFrame.setAlwaysOnTop(true);
        mapFrame.setLocation(new java.awt.Point(0, 0));
        mapFrame.setMinimumSize(new java.awt.Dimension(300, 400));
        mapFrame.setUndecorated(true);

        scrollPaneMap.setPreferredSize(new java.awt.Dimension(453, 351));

        mapTable.setFont(new java.awt.Font("Ebrima", 0, 13)); // NOI18N
        mapTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"a", "Lá"},
                {"b", "Sí"},
                {"c", "Dó"},
                {"d", "Ré"},
                {"e", "Mi"},
                {"f", "Fá"},
                {"g", "Sol"},
                {"i", "Repete nota/pausa anterior"},
                {"o", "Repete nota/pausa anterior"},
                {"u", "Repete nota/pausa anterior"},
                {"space", "Pausa"},
                {"+", "Aumenta volume em 2x"},
                {"-", "Diminui volume em 2x"},
                {"B+", "Aumenta 50 BPMs"},
                {"B-", "Diminui 50 BPMs"},
                {"O+", "Aumenta uma oitava"},
                {"O-", "Diminui uma oitava"},
                {".", "Oitava e volume padrão"},
                {"?", "Oitava e volume padrão"},
                {"\n", "Troca instrumento"}
            },
            new String [] {
                "CHAR", "SOM"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        mapTable.setColumnSelectionAllowed(true);
        mapTable.setName("Mapeamento");
        scrollPaneMap.setViewportView(mapTable);
        mapTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        javax.swing.GroupLayout mapFrameLayout = new javax.swing.GroupLayout(mapFrame.getContentPane());
        mapFrame.getContentPane().setLayout(mapFrameLayout);
        mapFrameLayout.setHorizontalGroup(
            mapFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mapFrameLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(scrollPaneMap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        mapFrameLayout.setVerticalGroup(
            mapFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneMap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NoteWorthy");
        setLocation(new java.awt.Point(0, 0));

        panel.setBackground(new java.awt.Color(255, 255, 255));

        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        textArea.setForeground(new java.awt.Color(102, 102, 102));
        textArea.setLineWrap(true);
        textArea.setRows(5);
        textArea.setText("Sphinx of black quartz, judge my vow.");
        textArea.setToolTipText("");
        textArea.setWrapStyleWord(true);
        textArea.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        textArea.setSelectionColor(new java.awt.Color(204, 204, 204));
        scrollPane.setViewportView(textArea);

        buildButton.setBackground(new java.awt.Color(102, 102, 102));
        buildButton.setForeground(new java.awt.Color(255, 255, 255));
        buildButton.setText("Build");
        buildButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildButtonPressed(evt);
            }
        });

        downloadButton.setBackground(new java.awt.Color(102, 102, 102));
        downloadButton.setForeground(new java.awt.Color(255, 255, 255));
        downloadButton.setText("Download");
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonPressed(evt);
            }
        });

        playButton.setBackground(new java.awt.Color(102, 102, 102));
        playButton.setForeground(new java.awt.Color(255, 255, 255));
        playButton.setText("Play");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonPressed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(downloadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buildButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)))
                .addContainerGap())
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buildButton)
                    .addComponent(downloadButton)
                    .addComponent(playButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menuBar.setBackground(new java.awt.Color(204, 204, 204));
        menuBar.setForeground(new java.awt.Color(51, 51, 51));

        fileMenu.setBackground(new java.awt.Color(204, 204, 204));
        fileMenu.setForeground(new java.awt.Color(102, 102, 102));
        fileMenu.setText("File");
        fileMenu.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N

        importItem.setText("Import .txt file");
        importItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importItemPressed(evt);
            }
        });
        fileMenu.add(importItem);

        exportItem.setText("Export .txt file");
        exportItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportItemPressed(evt);
            }
        });
        fileMenu.add(exportItem);

        menuBar.add(fileMenu);

        helpMenu.setBackground(new java.awt.Color(204, 204, 204));
        helpMenu.setForeground(new java.awt.Color(102, 102, 102));
        helpMenu.setText("Help");
        helpMenu.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N

        helpItem.setText("Show char map");
        helpItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mapItemPressed(evt);
            }
        });
        helpMenu.add(helpItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void buildButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildButtonPressed
    // Operaçao para contruir nova Pattern a partir do texto presente na caixa de texto
        try {
            Music music = new Music(textArea.getText());
            pattern = music.build();                                            //devolve Pattern construida, atribui ela a classe NoteWorthy para ser reproduzida indefinidamente ou até outra pattern ser construida
            JOptionPane.showMessageDialog(null, "Sucesso");                     //aviso (temporário pq eh mt feio) que pode reproduzir pattern em PLAY
        } catch (HeadlessException ex) {
            Logger.getLogger(NoteWorthy.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buildButtonPressed

    private void downloadButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButtonPressed
    //Operação para salvar Pattern construida em arquivo MIDI    
        Files files = new Files();
        try {
            files.write(pattern);
        } catch (IOException ex) {
            Logger.getLogger(NoteWorthy.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_downloadButtonPressed

    private void importItemPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importItemPressed
    // Operação de importação do conteúdo de arquivo .txt para caixa de texto
        Files files = new Files();
        try {
            String textFromFile = files.read();
            if(textFromFile != null) 
                textArea.setText(textFromFile);
        } catch (IOException ex) {
            Logger.getLogger(NoteWorthy.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_importItemPressed

    private void exportItemPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportItemPressed
    // Operação de exportação de arquivo .txt
        Files files = new Files();
        try {
            files.write(textArea.getText());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NoteWorthy.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_exportItemPressed

    private void mapItemPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mapItemPressed
        mapFrame.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        mapFrame.setAlwaysOnTop(false);
        mapFrame.setLocation(0,250);
        mapFrame.pack();
        mapFrame.setVisible(!mapFrame.isShowing());
    }//GEN-LAST:event_mapItemPressed

    private void playButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonPressed
    // Toca o Pattern (do JFugue) já construído por Music e atribuido em NoteWorthy
        if(pattern != null){
            Player player = new Player();
            player.play(pattern);
        }
    }//GEN-LAST:event_playButtonPressed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NoteWorthy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NoteWorthy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NoteWorthy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NoteWorthy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                
                new NoteWorthy().setVisible(true);                    
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buildButton;
    private javax.swing.JButton downloadButton;
    private javax.swing.JMenuItem exportItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem helpItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem importItem;
    private javax.swing.JFrame mapFrame;
    private javax.swing.JTable mapTable;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel panel;
    private javax.swing.JButton playButton;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JScrollPane scrollPaneMap;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
